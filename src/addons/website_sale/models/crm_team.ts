import { Fields } from "../../../core";
import { MetaModel, Model } from "../../../core/models"

@MetaModel.define()
class CrmTeam extends Model {
    static _module = module;
    static _parents = "crm.team";

    static websiteIds = Fields.One2many('website', 'salesteamId', {string: 'Websites', help: "Websites using this Sales Team"});
    static abandonedCartsCount = Fields.Integer({
        compute: '_computeAbandonedCarts',
        string: 'Number of Abandoned Carts', readonly: true});
    static abandonedCartsAmount = Fields.Integer({
        compute: '_computeAbandonedCarts',
        string: 'Amount of Abandoned Carts', readonly: true});

    async _computeAbandonedCarts() {
        // abandoned carts to recover are draft sales orders that have no order lines,
        // a partner other than the public user, and created over an hour ago
        // and the recovery mail was not yet sent
        let counts = {},
        amounts = {},
        websiteTeams = await this.filtered(team => team.websiteIds);
        if (websiteTeams.ok) {
            const abandonedCartsData = await this.env.items('sale.order').readGroup([
                ['isAbandonedCart', '=', true],
                ['cartRecoveryEmailSent', '=', false],
                ['teamId', 'in', websiteTeams.ids],
            ], ['amountTotal', 'teamId'], ['teamId']);
            counts = Object.fromEntries(abandonedCartsData.map(data => [data['teamId'][0], data['teamId_count']]))
            amounts = Object.fromEntries(abandonedCartsData.map(data => [data['teamId'][0], data['amountTotal']]))
        }
        for (const team of this) {
            await team.set('abandonedCartsCount', counts[team.id] ?? 0);
            await team.set('abandonedCartsAmount', amounts[team.id] ?? 0);
        }
    }

    async getAbandonedCarts() {
        this.ensureOne();
        return {
            'label': await this._t('Abandoned Carts'),
            'type': 'ir.actions.actwindow',
            'viewMode': 'tree,form',
            'domain': [['isAbandonedCart', '=', true]],
            'searchViewId': [(await this.env.ref('sale.saleOrderViewSearchInheritSale')).id],
            'context': {
                'searchDefault_teamId': this.id,
                'default_teamId': this.id,
                'searchDefault_recoveryEmail': 1,
                'create': false
            },
            'resModel': 'sale.order',
            'help': await this._t(`<p class="o-view-nocontent-smiling-face">
                        You can find all abandoned carts here, i.e. the carts generated by your website's visitors from over an hour ago that haven't been confirmed yet.</p>
                        <p>You should send an email to the customers to encourage them!</p>
                    `),
        }
    }
}
